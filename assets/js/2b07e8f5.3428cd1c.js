"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1332],{1629:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"java-springboot/optimize-jdbc-query-when-migration-database","title":"T\u1ed1i \u01b0u query jdbc khi migration database","description":"T\xf3m t\u1eaft","source":"@site/docs/java-springboot/optimize-jdbc-query-when-migration-database.md","sourceDirName":"java-springboot","slug":"/java-springboot/optimize-jdbc-query-when-migration-database","permalink":"/docs/java-springboot/optimize-jdbc-query-when-migration-database","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"T\u1ef1 vi\u1ebft 1 library v\u1edbi annotation, reflection, aop, springboot","permalink":"/docs/java-springboot/how-to-write-library-with-java-springboot"},"next":{"title":"Technology","permalink":"/docs/category/technology"}}');var a=t(4848),i=t(8453);const o={sidebar_position:5},c="T\u1ed1i \u01b0u query jdbc khi migration database",s={},l=[{value:"T\xf3m t\u1eaft",id:"t\xf3m-t\u1eaft",level:2},{value:"Code example",id:"code-example",level:2},{value:"Th\xeam log v\xe0o jdbc d\xf9ng <strong>proxy datasource</strong>",id:"th\xeam-log-v\xe0o-jdbc-d\xf9ng-proxy-datasource",level:3},{value:"Proxy Bean",id:"proxy-bean",level:3},{value:"Apply Batch",id:"apply-batch",level:3},{value:"Ignore check key khi l\u01b0u data m\u1edbi",id:"ignore-check-key-khi-l\u01b0u-data-m\u1edbi",level:3},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"t\u1ed1i-\u01b0u-query-jdbc-khi-migration-database",children:"T\u1ed1i \u01b0u query jdbc khi migration database"})}),"\n",(0,a.jsx)(n.h2,{id:"t\xf3m-t\u1eaft",children:"T\xf3m t\u1eaft"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ch\xfang ta s\u1ebd h\u1ecdc c\xe1ch th\xeam log v\xe0o datasource (log chi ti\u1ebft v\u1ec1 query g\u1ecdi sang database)"}),"\n",(0,a.jsx)(n.li,{children:"T\u1ed1i \u01b0u query jdbc, t\u1eeb 10000 call (5000 call check id + 5000 call insert) th\xe0nh 5001 call b\u1eb1ng batch insert."}),"\n",(0,a.jsx)(n.li,{children:"Ignore check key khi l\u01b0u data m\u1edbi. t\u1eeb 5001 call th\xe0nh 1 call."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"code-example",children:"Code example"}),"\n",(0,a.jsxs)(n.h3,{id:"th\xeam-log-v\xe0o-jdbc-d\xf9ng-proxy-datasource",children:["Th\xeam log v\xe0o jdbc d\xf9ng ",(0,a.jsx)(n.strong,{children:"proxy datasource"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Th\xeam pom."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"<dependency>\n      <groupId>net.ttddyy</groupId>\n      <artifactId>datasource-proxy</artifactId>\n      <version>1.9</version>\n</dependency>\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ho\u1eb7c gradle"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"// https://mvnrepository.com/artifact/net.ttddyy/datasource-proxy\nimplementation 'net.ttddyy:datasource-proxy:1.4.1'\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Th\xeam proxy datasource"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'class dbConfig{\n    @Bean\n    public DataSource datasource(){\n        HikariConfig hikariConfig=new HikariConfig();\n        hikariConfig.setDriverClassName("org.mariadb.jdbc.Driver");\n        hikariConfig.setJdbcUrl("jdbc:mysql://localhost:3307/hoang_db?useSSL=false&useUnicode=yes&characterEncoding=UTF-8");\n        hikariConfig.setUsername("admin");\n        hikariConfig.setPassword("admin");\n    \n        SLF4JQueryLoggingListener loggingListener=new SLF4JQueryLoggingListener();\n    \n        return ProxyDataSourceBuilder\n                .create(new HikariDataSource(hikariConfig))\n                .name("hoangDbDatasource")\n                .listener(loggingListener)\n                .countQuery()\n                .logQueryToSysOut()\n                .build();\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"t\u1ea1o test \u0111\u1ec3 check log"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'class Test{\n    @Bean\n    public void test(){\n        try {\n            hoangInfoRepository.save(new hoangEntity("1"));\n        } catch (Exception ex) {\n            System.out.println("fail to save hoangEntity: {} with error" + ex);\n        }\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"console"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'Name:hoangDatasource, Connection:3, Time:110, Success:True, Type:Prepared, Batch:False, QuerySize:1, BatchSize:0, Query:["select hoang0_.id as id1_0_0_ from hoang where hoang0_.id=?"], Params:[(1)]\nName:hoangDatasource, Connection:3, Time:9, Success:True, Type:Prepared, Batch:False, QuerySize:1, BatchSize:0, Query:["update hoang set x? where id=?"], Params:[1)]\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Gi\u1ea3i th\xedch: D\xf2ng log tr\xean c\xf3 ngh\u0129a l\xe0, tr\u01b0\u1edbc khi l\u01b0u, jdbc s\u1ebd check xem data c\xf3 t\u1ed3n t\u1ea1i hay kh\xf4ng, Sau \u0111\xf3, n\u1ebfu c\xf3 th\xec update, kh\xf4ng th\xec insert.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ch\xfang ta c\xf3 th\u1ec3 t\u1ed1i \u01b0u \u0111i\u1ec1u n\xe0y khi migration-db (\u0111\u1ea3m b\u1ea3o data m\u1edbi kh\xf4ng b\u1ecb tr\xf9ng v\u1edbi data c\u0169, kh\xf4ng c\u1ea7n check data c\u0169, ch\u1ec9 c\u1ea7n insert)"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"B\u1ea1n h\xe3y th\u1eed test v\u1edbi 5000 records, \u0111\u1ec3 \u1ee9ng d\u1ee5ng v\xe0o c\xe1c v\xed d\u1ee5 ti\u1ebfp theo."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"proxy-bean",children:"Proxy Bean"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"N\u1ebfu database config \u1edf yaml."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import net.ttddyy.dsproxy.listener.logging.SLF4JLogLevel;\nimport net.ttddyy.dsproxy.support.ProxyDataSource;\nimport net.ttddyy.dsproxy.support.ProxyDataSourceBuilder;\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\nimport org.springframework.aop.framework.ProxyFactory;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.ReflectionUtils;\n\nimport javax.sql.DataSource;\nimport java.lang.reflect.Method;\n\n@Component\npublic class DatasourceProxyBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) {\n        if (bean instanceof DataSource source && !(bean instanceof ProxyDataSource)) {\n            // Instead of directly returning a less specific datasource bean\n            // (e.g.: HikariDataSource -> DataSource), return a proxy object.\n            // See following links for why:\n            //   https://stackoverflow.com/questions/44237787/how-to-use-user-defined-database-proxy-in-datajpatest\n            //   https://gitter.im/spring-projects/spring-boot?at=5983602d2723db8d5e70a904\n            //   https://arnoldgalovics.com/configuring-a-datasource-proxy-in-spring-boot/\n            final ProxyFactory factory = new ProxyFactory(bean);\n            factory.setProxyTargetClass(true);\n            factory.addAdvice(new ProxyDataSourceInterceptor(source));\n            return factory.getProxy();\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) {\n        return bean;\n    }\n\n    private static class ProxyDataSourceInterceptor implements MethodInterceptor {\n        private final DataSource dataSource;\n\n        public ProxyDataSourceInterceptor(final DataSource dataSource) {\n            this.dataSource = ProxyDataSourceBuilder.create(dataSource)\n                    .name("hoangDS")\n                    .multiline()\n                    .logQueryBySlf4j(SLF4JLogLevel.INFO)\n                    .build();\n        }\n\n        @Override\n        public Object invoke(final MethodInvocation invocation) throws Throwable {\n            final Method proxyMethod = ReflectionUtils.findMethod(this.dataSource.getClass(),\n                    invocation.getMethod().getName());\n            if (proxyMethod != null) {\n                return proxyMethod.invoke(this.dataSource, invocation.getArguments());\n            }\n            return invocation.proceed();\n        }\n    }\n\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"apply-batch",children:"Apply Batch"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"T\u1eeb c\xe1ch th\xeam log tr\xean, b\u1ea1n c\xf3 th\u1ec3 ki\u1ec3m tra bao nhi\xeau request t\u1edbi db khi l\u01b0u 5000 records, n\u1ebfu kh\xf4ng apply batch, s\u1ebd l\xe0 10.000 request, 5000 cho check data c\u0169, 5000 cho insert."}),"\n",(0,a.jsx)(n.li,{children:"\u0110\u1ec3 t\u1ed1i \u01b0u, ch\xfang ta s\u1ebd apply batch insert, s\u1ebd c\xf2n 5001 request, 5000 request cho check data c\u0169 (vi\u1ec7c check n\xe0y kh\xf4ng th\u1ec3 apply batch, v\xec check tr\xean t\u1eebng id), v\xe0 1 request cho insert (n\u1ebfu data ko b\u1ecb tr\xf9ng)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"spring:\n  jpa:\n    properties:\n      hibernate.jdbc.batch_size: 5000\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:['Springboot c\xf3 h\u1ed7 tr\u1ee3 "',(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"jpa.show-sql: true"})}),'" \u0111\u1ec3 show ra c\xe2u query (nh\u01b0ng kh\xf4ng \u0111\u1ea7y \u0111\u1ee7 nh\u01b0 ',(0,a.jsx)(n.strong,{children:"proxy datasource"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"B\u1ea1n h\xe3y th\u1eed test v\u1edbi 5000 records, s\u1ebd th\u1ea5y ch\u1ec9 c\xf2n 5001 request."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"ignore-check-key-khi-l\u01b0u-data-m\u1edbi",children:"Ignore check key khi l\u01b0u data m\u1edbi"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"implement Persistable and override isNew() method and getId() method```java"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class HoangEntity implements Persistable<String> {\n  @Id\n  @Column(name = "id")\n  private String id;\n\n  @Override\n  public boolean isNew() {\n    return true;\n  }\n\n  @Override\n  public String getId() {\n    return id;\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"L\xfac n\xe0y s\u1ebd ch\u1ec9 c\xf2n duy nh\u1ea5t 1 request insert batch."}),"\n",(0,a.jsx)(n.li,{children:"B\u1ea1n h\xe3y th\u1eed insert tr\xf9ng v\xe0 xem log."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/jdbc-observations/datasource-proxy",children:"https://github.com/jdbc-observations/datasource-proxy"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://vladmihalcea.com/the-best-way-to-log-jdbc-statements/",children:"https://vladmihalcea.com/the-best-way-to-log-jdbc-statements/"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);