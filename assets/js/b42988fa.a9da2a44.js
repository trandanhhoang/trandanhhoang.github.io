"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[769],{8267:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var s=a(4848),n=a(8453);const i={},r="Microservice Pattern with example - minimized.",o={id:"blog/25-02-17-microservice-pattern-minimize",title:"Microservice Pattern with example - minimized.",description:'This page talks about lessons learned from the book "Microservice Patterns with example in Java" by Chris Richardson, so sentences are my own thoughts, not from the book.',source:"@site/docs/blog/25-02-17-microservice-pattern-minimize.md",sourceDirName:"blog",slug:"/blog/25-02-17-microservice-pattern-minimize",permalink:"/docs/blog/25-02-17-microservice-pattern-minimize",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Problems at Redis in microservices",permalink:"/docs/blog/25-01-06-problems-at-redis"},next:{title:"Fundamental Knowledge",permalink:"/docs/category/fundamental-knowledge"}},l={},h=[];function c(e){const t={a:"a",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"microservice-pattern-with-example---minimized",children:"Microservice Pattern with example - minimized."})}),"\n",(0,s.jsxs)(t.p,{children:["This page talks about lessons learned from the book ",(0,s.jsx)("span",{className:"layered-style",children:'"Microservice Patterns with example in Java"'})," by Chris Richardson, so sentences are my own thoughts, not from the book."]}),"\n",(0,s.jsx)(t.p,{children:"Both the database update and the sending of the message must happen within a transaction. Otherwise,\na service might update the database and then crash, for example, before sending the\nmessage. If the service doesn\u2019t perform these two operations atomically, a failure\ncould leave the system in an inconsistent state"}),"\n",(0,s.jsx)(t.p,{children:"The traditional solution is to use a distributed transaction that spans the database\nand the message broker. But as you\u2019ll learn in chapter 4, distributed transactions\naren\u2019t a good choice for modern applications. Moreover, many modern brokers such\nas Apache Kafka don\u2019t support distributed transactions."}),"\n",(0,s.jsx)("span",{className:"layered-style",children:"USING A DATABASE TABLE AS A MESSAGE QUEUE "}),"\n",(0,s.jsxs)(t.p,{children:["Pattern: Transactional outbox\nPublish an event or message as part of a database transaction by saving it in an OUTBOX in the database. See ",(0,s.jsx)(t.a,{href:"http://microservices.io/patterns/data/transactional-outbox.html",children:"http://microservices.io/patterns/data/transactional-outbox.html"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"img.png",src:a(5698).A+"",width:"900",height:"463"})}),"\n",(0,s.jsx)(t.p,{children:"The OUTBOX table acts a temporary message queue. The MessageRelay is a component that reads the OUTBOX table and publishes the messages to a message broker.  There are a couple of different ways to move messages from the database to the\nmessage broker. We\u2019ll look at each one."}),"\n",(0,s.jsx)("span",{className:"layered-style",children:"PUBLISHING EVENTS BY USING THE POLLING PUBLISHER PATTERN "}),"\n",(0,s.jsx)(t.p,{children:"If the application uses a relational database, a very simple way to publish the messages\ninserted into the OUTBOX table is for the MessageRelay to poll the table for unpublished messages. It periodically queries the table:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM OUTBOX ORDERED BY ... ASC\n"})}),"\n",(0,s.jsx)(t.p,{children:"Next, the MessageRelay publishes those messages to the message broker, sending one\nto its destination message channel. Finally, it deletes those messages from the OUTBOX\ntable:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"BEGIN\nDELETE FROM OUTBOX WHERE ID in (....)\nCOMMIT\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Pattern: Polling publisher\nPublish messages by polling the outbox in the database. See ",(0,s.jsx)(t.a,{href:"http://microservices.io/patterns/data/polling-publisher.html",children:"http://microservices.io/patterns/data/polling-publisher.html"}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Downside is that frequently polling the database can be expensive"}),"\n"]}),"\n",(0,s.jsx)("span",{className:"layered-style",children:"PUBLISHING EVENTS BY APPLYING THE TRANSACTION LOG TAILING PATTERN "}),"\n",(0,s.jsx)(t.p,{children:"A sophisticated solution is for MessageRelay to tail the database transaction log (also\ncalled the commit log)."}),"\n",(0,s.jsxs)(t.p,{children:["Pattern: Transaction log tailing\nPublish changes made to the database by tailing the transaction log. See ",(0,s.jsx)(t.a,{href:"http://microservices.io/patterns/data/transaction-log-tailing.html",children:"http://microservices.io/patterns/data/transaction-log-tailing.html"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"There are a few examples of this approach in use:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Debezium (",(0,s.jsx)(t.a,{href:"http://debezium.io)%E2%80%94An",children:"http://debezium.io)\u2014An"})," open source project that publishes database changes to the Apache Kafka message broker."]}),"\n",(0,s.jsxs)(t.li,{children:["LinkedIn Databus (",(0,s.jsx)(t.a,{href:"https://github.com/linkedin/databus)%E2%80%94An",children:"https://github.com/linkedin/databus)\u2014An"})," open source project that mines the Oracle transaction log and publishes the changes as events.\nLinkedIn uses Databus to synchronize various derived data stores with the system of record."]}),"\n",(0,s.jsxs)(t.li,{children:["DynamoDB streams (",(0,s.jsx)(t.a,{href:"http://docs.aws.amazon.com/amazondynamodb/latest/",children:"http://docs.aws.amazon.com/amazondynamodb/latest/"}),"\ndeveloperguide/Streams.html)\u2014DynamoDB streams contain the time-ordered\nsequence of changes (creates, updates, and deletes) made to the items in a\nDynamoDB table in the last 24 hours. An application can read those changes\nfrom the stream and, for example, publish them as events."]}),"\n",(0,s.jsxs)(t.li,{children:["Eventuate Tram (",(0,s.jsx)(t.a,{href:"https://github.com/eventuate-tram/eventuate-tram-core)%E2%80%94Your",children:"https://github.com/eventuate-tram/eventuate-tram-core)\u2014Your"}),"\nauthor\u2019s very own open source transaction messaging library that uses MySQL\nbinlog protocol, Postgres WAL, or polling to read changes made to an OUTBOX\ntable and publish them to Apache Kafka."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},5698:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/tx-outbox-4f6c6886bdfd872fc86674696a4334b8.png"},8453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>o});var s=a(6540);const n={},i=s.createContext(n);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);